name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Clean repository to remove old build artifacts and pycache
        run: |
          git clean -xfd # Removes untracked files and directories, including __pycache__
          git reset --hard # Ensures repository is exactly at commit state

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Removed --force-reinstall to allow cache to be effective for faster CI runs
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero on success, provide a failure if errors were found
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
          
      - name: Run a dummy train/infer/eval sequence (conceptual check)
        run: |
          # 1. Train the model (creates aperture_llm_model_epoch_1.pt based on num_epochs: 1)
          python src/scripts/train_model.py --config src/config/model_config.yaml
          
          # 2. Run the bridge demonstration, providing the required --model_path
          # Assuming example_bridge.py correctly implements the logic to run train->infer->eval sequence
          python examples/example_bridge.py \
            --config src/config/model_config.yaml \
            --model_path aperture_llm_model_epoch_1.pt
