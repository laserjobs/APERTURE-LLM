name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Clean repository to remove old build artifacts and pycache
        run: |
          git clean -xfd # Removes untracked files and directories, including __pycache__
          git reset --hard # Ensures repository is exactly at commit state

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # FIX: Correct PYTHONPATH for package discovery
      # This sets the repository root as a path where Python looks for packages.
      # So, 'src' itself becomes a package that can be imported (e.g., 'import src.aperture_core').
      # Or, if imports are 'from aperture_core.model', Python finds 'aperture_core' inside 'src'.
      # For consistency with 'from src.aperture_core' style, the repo root is correct.
      - name: Set PYTHONPATH for package discovery
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV 

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero on success, provide a failure if errors were found
          # Run flake8 on src and examples directories
          flake8 src examples --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      # --- START CI Steps for comprehensive testing ---
      - name: Run APERTURE-LLM Training (produces model checkpoint)
        run: |
          python src/scripts/train_model.py --config src/config/model_config.yaml
          ls -l aperture_llm_model_epoch_1.pt

      - name: Run APERTURE-LLM Inference (basic check)
        run: |
          python src/scripts/infer_model.py \
            --config src/config/model_config.yaml \
            --model_path aperture_llm_model_epoch_1.pt \
            --raw_text_input "The future of AI is" \
            --max_new_tokens 20

      - name: Run APERTURE-LLM Evaluation (basic check)
        run: |
          python src/scripts/evaluate_model.py \
            --config src/config/model_config.yaml \
            --model_path aperture_llm_model_epoch_1.pt

      - name: Run Aperture-Token Bridge Demonstration
        run: |
          python examples/example_bridge.py
      # --- END CI Steps ---
